"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Echo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SERVER_TIME_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    ERROR_FIELD_NUMBER: builtins.int
    TRACEBACK_FIELD_NUMBER: builtins.int
    RPC_NAME_FIELD_NUMBER: builtins.int
    PROTO_DATA_FIELD_NUMBER: builtins.int
    BASE64_STRING_FIELD_NUMBER: builtins.int
    @property
    def server_time(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    message: typing.Text
    error: typing.Text
    traceback: typing.Text
    rpc_name: typing.Text
    proto_data: typing.Text
    """proto_data is the jsonified message
    on server side loads(proto_data) -> dict_to_message
    on client side proto_data = message_to_json(client_message)
    """

    base64_string: typing.Text
    """protobuf serilaised to the a base64 string"""

    def __init__(self,
        *,
        server_time: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
        message: typing.Text = ...,
        error: typing.Text = ...,
        traceback: typing.Text = ...,
        rpc_name: typing.Text = ...,
        proto_data: typing.Text = ...,
        base64_string: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data","error",b"error","message",b"message","server_time",b"server_time","traceback",b"traceback"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["base64_string",b"base64_string","data",b"data","error",b"error","message",b"message","proto_data",b"proto_data","rpc_name",b"rpc_name","server_time",b"server_time","traceback",b"traceback"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["message","error","traceback"]]: ...
global___Echo = Echo
